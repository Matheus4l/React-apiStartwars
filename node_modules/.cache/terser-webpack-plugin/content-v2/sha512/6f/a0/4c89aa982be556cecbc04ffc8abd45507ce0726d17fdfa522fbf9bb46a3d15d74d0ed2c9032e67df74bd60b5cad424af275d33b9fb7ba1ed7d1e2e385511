{"map":"{\"version\":3,\"sources\":[\"/Users/mac3c/testereact/src/Components/header/index.js\",\"/Users/mac3c/testereact/src/services/App.js\",\"/Users/mac3c/testereact/src/pages/main/index.js\",\"/Users/mac3c/testereact/src/App.js\",\"/Users/mac3c/testereact/src/serviceWorker.js\",\"/Users/mac3c/testereact/src/index.js\"],\"names\":[\"Header\",\"react_default\",\"a\",\"createElement\",\"id\",\"apiRest\",\"axios\",\"create\",\"baseURL\",\"Main\",\"state\",\"products\",\"loadProducts\",\"_callee\",\"response\",\"regenerator_default\",\"wrap\",\"_context\",\"prev\",\"next\",\"get\",\"sent\",\"_this\",\"setState\",\"data\",\"docs\",\"console\",\"log\",\"_id\",\"stop\",\"this\",\"className\",\"map\",\"key\",\"title\",\"description\",\"href\",\"Component\",\"App\",\"header\",\"main_Main\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"wOAMeA,SAHA,WAAA,OAAMC,EAAAC,EAAAC,cAAA,SAAA,CAAQC,GAAG,SAAX,kFCCNC,SAFCC,EAAMC,OAAO,CAACC,QAAQ,6CCKjBC,0NAEjBC,MAAM,CACJC,SAAS,MAuBXC,kCAAc,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAb,EAAAc,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EACYd,EAAQe,IAAI,aADxB,KAAA,EACJN,EADIG,EAAAI,KAEVC,EAAKC,SAAS,CAACZ,SAAUG,EAASU,KAAKC,OACvCC,QAASC,IAAIb,EAASU,KAAKC,KAAK,GAAGG,KAHzB,KAAA,EAAA,IAAA,MAAA,OAAAX,EAAAY,SAAAhB,yFAnBViB,KAAKlB,gDAKD,IACGD,EAAWmB,KAAKpB,MAAhBC,SACP,OAAOV,EAAAC,EAAAC,cAAA,MAAA,CAAK4B,UAAU,gBAAf,aAAyCpB,EAASqB,IAAI,SAAArB,GAAQ,OACrEV,EAAAC,EAAAC,cAAA,UAAA,CAAS8B,IAAKtB,EAASiB,KACnB3B,EAAAC,EAAAC,cAAA,SAAA,KAASQ,EAASuB,OAClBjC,EAAAC,EAAAC,cAAA,IAAA,KAAIQ,EAASwB,aAEblC,EAAAC,EAAAC,cAAA,IAAA,CAAGiC,KAAK,IAAR,qBAnBsBC,EAAAA,YCUnBC,SAZH,WAAA,OAERrC,EAAAC,EAAAC,cAAA,MAAA,CAAK4B,UAAU,OAEb9B,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAAA,IAAA,KAAA,YCCcsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAAA,EAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from \\\"react\\\";\\nimport \\\"./style.css\\\";\\n\\nconst Header = () => <header id=\\\"main2\\\">Main</header>\\n;\\n\\nexport default Header;\\n\",\"import axios from 'axios';\\n\\nconst apiRest = axios.create({baseURL:'http://rocketseat-node.herokuapp.com/api'});\\n\\nexport default apiRest;\",\"import React, {Component} from 'react';\\nimport Api from '../../services/App'\\nimport { async } from 'q';\\nimport apiRest from '../../services/App';\\nimport './style.css';\\n\\n\\nexport default class Main extends Component{\\n\\n    state={\\n      products:[]\\n    };\\n\\n    componentDidMount(){\\n        this.loadProducts();\\n    };\\n\\n    \\n\\n    render(){\\n        const {products}= this.state;\\n        return <div className='listProducts'>registro: {products.map(products=>(\\n        <article key={products._id}>\\n            <strong>{products.title}</strong>\\n            <p>{products.description}</p>\\n\\n            <a href=''>Acesso</a>\\n        </article>\\n        \\n        ))}</div>\\n    }\\n\\n\\n    loadProducts= async()=>{\\n        const response =await apiRest.get('/products');\\n        this.setState({products: response.data.docs})\\n        console .log(response.data.docs[0]._id);\\n\\n    };\\n}\",\"import React from 'react';\\nimport Header from './Components/header';\\nimport Main from './pages/main';\\nimport './style.css';\\n\\nconst App = () => (\\n\\n    <div className='App'>\\n\\n      <Header />\\n      <Main />\\n      <p>Teste</p>\\n    </div>\\n  );\\n  \\n\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{22:function(e,t,n){e.exports=n(50)},27:function(e,t,n){},48:function(e,t,n){},49:function(e,t,n){},50:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(14),c=n.n(o),i=(n(27),function(){return r.a.createElement(\"header\",{id:\"main2\"},\"Main\")}),s=n(4),l=n.n(s),u=n(15),d=n(16),p=n(17),m=n(20),f=n(18),h=n(21),w=n(19),v=n.n(w).a.create({baseURL:\"http://rocketseat-node.herokuapp.com/api\"}),E=(n(45),n(48),function(e){function t(){var e,n;Object(d.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(m.a)(this,(e=Object(f.a)(t)).call.apply(e,[this].concat(r)))).state={products:[]},n.loadProducts=Object(u.a)(l.a.mark(function e(){var t;return l.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,v.get(\"/products\");case 2:t=e.sent,n.setState({products:t.data.docs}),console.log(t.data.docs[0]._id);case 5:case\"end\":return e.stop()}},e)})),n}return Object(h.a)(t,e),Object(p.a)(t,[{key:\"componentDidMount\",value:function(){this.loadProducts()}},{key:\"render\",value:function(){var e=this.state.products;return r.a.createElement(\"div\",{className:\"listProducts\"},\"registro: \",e.map(function(e){return r.a.createElement(\"article\",{key:e._id},r.a.createElement(\"strong\",null,e.title),r.a.createElement(\"p\",null,e.description),r.a.createElement(\"a\",{href:\"\"},\"Acesso\"))}))}}]),t}(a.Component)),k=(n(49),function(){return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(i,null),r.a.createElement(E,null),r.a.createElement(\"p\",null,\"Teste\"))});Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(k,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[22,1,2]]]);","extractedComments":[]}